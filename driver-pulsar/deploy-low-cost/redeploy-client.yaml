#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

- name: Initialize some default values
  hosts: all
  connection: ssh
  tasks:
    - set_fact:
        private_ip: "{{ hostvars[inventory_hostname]['ansible_default_ipv4']['address'] }}"
    - set_fact:
        zookeeperServers: "{{ groups['zookeeper'] | map('extract', hostvars, ['ansible_default_ipv4', 'address']) | map('regex_replace', '^(.*)$', '\\1:2181') | join(',') }}"
        serviceUrl: "pulsar://{{ hostvars[groups['pulsar'][0]].private_ip }}:6650/"
        httpUrl: "http://{{ hostvars[groups['pulsar'][0]].private_ip }}:8080/"
    - set_fact:
        pulsar_version: "{{ pulsar_version | default('2.11.0') }}"
        node_exporter_version: "{{ node_exporter_version | default('1.2.2') }}"
        prometheus_version: "{{ prometheus_version | default('2.31.1') }}"
        disk_dev: "{{ disk_dev | default(['/dev/nvme1n1', '/dev/nvme2n1']) }}"
    - set_fact:
        pulsar_binary:
          src: "https://archive.apache.org/dist/pulsar/pulsar-{{ pulsar_version }}/apache-pulsar-{{ pulsar_version }}-bin.tar.gz"
          remote: yes
      when: pulsar_binary is not defined
    - set_fact:
        node_exporter_binary:
          src: "https://github.com/prometheus/node_exporter/releases/download/v{{ node_exporter_version }}/node_exporter-{{ node_exporter_version }}.linux-amd64.tar.gz"
          remote: yes
      when: node_exporter_binary is not defined
    - set_fact:
        prometheus_binary:
          src: "https://github.com/prometheus/prometheus/releases/download/v{{ prometheus_version }}/prometheus-{{ prometheus_version }}.linux-amd64.tar.gz"
          remote: yes
      when: prometheus_binary is not defined

- name: Pulsar installation
  hosts: pulsar:client:zookeeper
  connection: ssh
  become: true
  tasks:
    - set_fact:
        max_heap_memory: "{{ pulsar_max_heap_memory | default('4g') }}"
        max_direct_memory: "{{ pulsar_max_direct_memory | default('4g') }}"

- name: ZooKeeper setup
  hosts: zookeeper
  connection: ssh
  become: true
  tasks:
    - set_fact:
        zid: "{{ groups['zookeeper'].index(inventory_hostname) }}"
        max_heap_memory: "{{ zookeeper_max_heap_memory | default('4G') }}"
        max_direct_memory: "{{ zookeeper_max_direct_memory | default('2G') }}"

- name: BookKeeper setup
  hosts: pulsar
  connection: ssh
  become: true
  tasks:
    - set_fact:
        skip_journal: "{{ skip_journal | default(false) }}"

- name: Pulsar benchmarking client setup
  hosts: client
  connection: ssh
  become: true
  tasks:
    - name: Set up client config
      template:
        src: "templates/client.conf"
        dest: "/opt/pulsar/conf/client.conf"
    - file: path=/opt/benchmark state=absent
    - name: Copy benchmark code
      unarchive:
        src: ../../package/target/openmessaging-benchmark-0.0.1-SNAPSHOT-bin.tar.gz
        dest: /opt
    - shell: mv /opt/openmessaging-benchmark-0.0.1-SNAPSHOT /opt/benchmark

    - template:
        src: "templates/workers.yaml"
        dest: "/opt/benchmark/workers.yaml"
    - name: Get list of driver config files
      raw: ls -1 /opt/benchmark/driver-pulsar/*.yaml
      register: drivers_list

    - name: Configure service URL
      lineinfile:
         dest: '{{ item }}'
         regexp: '^  serviceUrl\: '
         line: '  serviceUrl: {{ serviceUrl }}'
      with_items: '{{ drivers_list.stdout_lines }}'
    - name: Configure http URL
      lineinfile:
         dest: '{{ item }}'
         regexp: '^  httpUrl: '
         line: '  httpUrl: {{ httpUrl }}'
      with_items: '{{ drivers_list.stdout_lines }}'

    - name: Get list of jms driver config files
      raw: ls -1 /opt/benchmark/driver-jms/pulsar*.yaml
      register: jms_drivers_list

    - name: Configure JMS service URL
      lineinfile:
         dest: '{{ item }}'
         regexp: '^  serviceUrl\: '
         line: '  serviceUrl: {{ serviceUrl }}'
      with_items: '{{ jms_drivers_list.stdout_lines }}'
    - name: Configure JMS service Connection Handler
      ansible.builtin.replace:
         dest: '{{ item }}'
         regexp: 'pulsar\:\/\/localhost\:6650'
         replace: '{{ serviceUrl }}'
      with_items: '{{ jms_drivers_list.stdout_lines }}'
    - name: Configure JMS http URL
      lineinfile:
         dest: '{{ item }}'
         regexp: '^  httpUrl: '
         line: '  httpUrl: {{ httpUrl }}'
      with_items: '{{ jms_drivers_list.stdout_lines }}'
    - name: Configure JMS http Connection Handler
      ansible.builtin.replace:
         dest: '{{ item }}'
         regexp: 'http\:\/\/localhost\:8080'
         replace: '{{ httpUrl }}'
      with_items: '{{ jms_drivers_list.stdout_lines }}'

    - name: Configure memory
      lineinfile:
         dest: /opt/benchmark/bin/benchmark-worker
         regexp: '^JVM_MEM='
         line: 'JVM_MEM="-Xms10G -Xmx10G -XX:MaxDirectMemorySize=16g -XX:+UnlockExperimentalVMOptions -XX:+UseZGC"'
    - name: Configure memory
      lineinfile:
         dest: /opt/benchmark/bin/benchmark
         regexp: '^JVM_MEM='
         line: 'JVM_MEM="-Xmx4G"'
    - name: Install benchmark systemd service
      template:
        src: "templates/benchmark-worker.service"
        dest: "/etc/systemd/system/benchmark-worker.service"
    - systemd:
        state: restarted
        daemon_reload: yes
        name: "benchmark-worker"

- name: List host addresses
  hosts: localhost
  become: false
  tasks:
    - debug:
        msg: "Zookeeper servers {{ item }}"
      with_items: "{{ groups['zookeeper'] }}"
    - debug:
        msg: "Pulsar/BookKeeper servers {{ item }}"
      with_items: "{{ groups['pulsar'] }}"
    - debug:
        msg: "Benchmark clients {{ item }}"
      with_items: "{{ groups['client'] }}"

#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

- name: Get common facts
  hosts: ["!tier2"]
  tags: ["always"]
  connection: ssh
  become: true
  vars_files:
    - vars.yaml
  tasks:
    - set_fact:
        pravegaVersion: "{{ pravegaVersion }}"
        zookeeperVersion: "{{ zookeeperVersion }}"
        bookkeeperVersion: "{{ bookkeeperVersion }}"
        prometheusVersion: "{{ prometheusVersion }}"
        pravegaContainersPerSegmentStore: "{{ pravegaContainersPerSegmentStore }}"
        zookeeperServers: "{{ groups['zookeeper'] | map('extract', hostvars, ['ansible_default_ipv4', 'address']) | map('regex_replace', '^(.*)$', '\\1:2181') | join(',') }}"
        controllerUrl: "tcp://{{ hostvars[groups['controller'][0]].private_ip }}:9090"
        private_ip: "{{ hostvars[inventory_hostname]['ansible_default_ipv4']['address'] }}"
        segmentStoreCount: "{{ groups['bookkeeper'] | length }}"
    - set_fact:
        # Change below to use a published release of Pravega or a local build.
        pravegaSrc: "https://github.com/pravega/pravega/releases/download/v{{ pravegaVersion }}/pravega-{{ pravegaVersion }}.tgz"
        pravegaSrcRemote: yes
        # Here is the file path for local Pravega build
        #pravegaSrc: "../../../pravega/build/distributions/pravega-{{ pravegaVersion }}.tgz"
        #pravegaSrcRemote: no
        pravegaContainerCount: "{{ segmentStoreCount|int * pravegaContainersPerSegmentStore|int }}"

- name: Uninstall
  hosts: ["!tier2"]
  tags: ["uninstall"]
  connection: ssh
  become: true
  tasks:
    - name: Stop services
      systemd:
        name: "{{ item }}"
        state: stopped
        enabled: no
      ignore_errors: yes
      with_items:
        - "benchmark-worker"
        - "pravega-segmentstore"
        - "pravega-controller"
        - "bookkeeper"
        - "zookeeper"
    - name: Delete files on hosts
      ansible.builtin.shell:
        cmd: "rm -rf /opt/pravega /opt/zookeeper /opt/bookkeeper /opt/benchmark /mnt/journal/*"
    # - name: Delete files on tier 2
    #   ansible.builtin.shell:
    #     cmd: "rm -rf /mnt/tier2/*"
    #   when: groups['bookkeeper'][0] == inventory_hostname
    # - name: Unmount tier 2
    #   shell: "umount /mnt/tier2"
    #   ignore_errors: yes

- name: Common installation
  hosts: ["!tier2"]
  tags: ["controller", "segmentstore", "bookkeeper", "zookeeper", "client"]
  connection: ssh
  become: true
  tasks:
    - name: Set performance profile
      command: tuned-adm profile latency-performance
    - name: Install RPM packages
      yum: pkg={{ item }} state=latest
      with_items:
        - chrony
        - java-11
        - nano
        - nc
        - nfs-utils
        - screen
        - sysstat
        - unzip
        - vim
        - wget
        - zip
    - name: Change locale to en_US.utf-8
      shell: |
        echo 'LANG=en_US.utf-8
              LC_ALL=en_US.utf-8' >> /etc/environment

- name: Format and mount disks for Zookeeper hosts
  hosts: zookeeper
  tags: ["zookeeper"]
  connection: ssh
  become: true
  tasks:
    - systemd:
        name: "zookeeper"
        state: stopped
      ignore_errors: yes
    - name: Unmount disks
      mount:
        path: "{{ item.path }}"
        state: unmounted
      with_items:
        - { path: "/opt/zookeeper/data/zookeeper", src: "/dev/nvme1n1" }
    - name: Format disks
      filesystem:
        fstype: xfs
        dev: '{{ item }}'
        force: yes
      with_items:
        - '/dev/nvme1n1'
    - name: Mount disks
      mount:
        path: "{{ item.path }}"
        src: "{{ item.src }}"
        fstype: xfs
        opts: defaults,noatime,nodiscard
        state: mounted
      with_items:
        - { path: "/opt/zookeeper/data/zookeeper", src: "/dev/nvme1n1" }

- name: ZooKeeper setup
  hosts: zookeeper
  tags: ["zookeeper"]
  connection: ssh
  become: true
  tasks:
    - name: Download ZooKeeper binary package
      unarchive:
        src: "http://archive.apache.org/dist/zookeeper/zookeeper-{{ zookeeperVersion }}/apache-zookeeper-{{ zookeeperVersion }}-bin.tar.gz"
        remote_src: yes
        dest: /opt/zookeeper
        extra_opts: ["--strip-components=1"]
    - set_fact:
        zid: "{{ groups['zookeeper'].index(inventory_hostname) }}"
        max_heap_memory: "15g"
        max_direct_memory: "15g"
    - file:
        path: "/opt/zookeeper/{{ item }}"
        state: directory
      with_items:
        - data/zookeeper
    - template:
        src: "templates/zoo.cfg"
        dest: "/opt/zookeeper/conf/zoo.cfg"
    - template:
        src: templates/myid
        dest: "/opt/zookeeper/data/zookeeper/myid"
    - template:
        src: "templates/zookeeper.service"
        dest: "/etc/systemd/system/zookeeper.service"
    - systemd:
        name: "zookeeper"
        daemon_reload: yes
        state: restarted
        enabled: yes
    - name: Initialize ZooKeeper
      shell: >
        bin/zkServer-initialize.sh init --force --myid={{ zid }} && \
        (until bin/zkCli.sh ls / ; do sleep 1; done)
      args:
        chdir: /opt/zookeeper
      when: groups['zookeeper'][0] == inventory_hostname
    - name: Create Zookeeper nodes
      shell: >
        bin/zkCli.sh create {{ item }}
      args:
        chdir: /opt/zookeeper
      when: groups['zookeeper'][0] == inventory_hostname
      with_items:
        - /pravega
        - /pravega/pravega-cluster
        - /pravega/pravega-cluster/bookkeeper

- name: Pravega common installation
  hosts: ["controller", "bookkeeper"]
  tags: ["controller", "segmentstore"]
  connection: ssh
  become: true
  tasks:
    - file: path=/opt/pravega state=absent
    - file: path=/opt/pravega state=directory
    - name: Download Pravega binary package
      unarchive:
        src: "{{ pravegaSrc }}"
        remote_src: "{{ pravegaSrcRemote }}"
        dest: /opt/pravega
        extra_opts: ["--strip-components=1"]
    - template:
        src: "templates/config.properties"
        dest: "/opt/pravega/conf/config.properties"
    - template:
        src: "templates/controller.config.properties"
        dest: "/opt/pravega/conf/controller.config.properties"
    - template:
        src: "templates/logback.xml"
        dest: "/opt/pravega/conf/logback.xml"

- name: Pravega Controller installation
  hosts: controller
  tags: ["controller"]
  connection: ssh
  become: true
  tasks:
    - template:
        src: "templates/pravega-controller.service"
        dest: "/etc/systemd/system/pravega-controller.service"
    - systemd:
        name: "pravega-controller"
        daemon_reload: yes
        state: restarted
        enabled: yes

- name: Format and mount disks for BookKeeper hosts
  hosts: bookkeeper
  tags: ["bookkeeper"]
  connection: ssh
  become: true
  tasks:
    - systemd:
        name: "bookkeeper"
        state: stopped
      ignore_errors: yes
    - name: Unmount disks
      mount:
        path: "{{ item.path }}"
        state: unmounted
      with_items:
        - { path: "/mnt/journal", src: "/dev/nvme1n1" }
        - { path: "/mnt/storage", src: "/dev/nvme2n1" }
    - name: Format disks
      filesystem:
        fstype: xfs
        dev: '{{ item }}'
        force: yes
      with_items:
        - '/dev/nvme1n1'
        - '/dev/nvme2n1'
    - name: Mount disks
      mount:
        path: "{{ item.path }}"
        src: "{{ item.src }}"
        fstype: xfs
        opts: defaults,noatime,nodiscard
        state: mounted
      with_items:
        - { path: "/mnt/journal", src: "/dev/nvme1n1" }
        - { path: "/mnt/storage", src: "/dev/nvme2n1" }

# - name: Format and mount disks for BookKeeper hosts
#   hosts: bookkeeper
#   tags: ["bookkeeper"]
#   connection: ssh
#   become: true
#   tasks:
#     - systemd:
#         name: "bookkeeper"
#         state: stopped
#       ignore_errors: yes
#     - name: Get EC2 volume details
#       delegate_to: localhost
#       vars:
#         ansible_python_interpreter: /usr/local/bin/python3.12
#       amazon.aws.ec2_vol_info:
#         access_key: "{{ lookup('env', 'AWS_ACCESS_KEY') }}"
#         secret_key: "{{ lookup('env', 'AWS_SECRET_KEY') }}"
#         region: eu-west-1
#         filters:
#           "tag:Name": "bookkeeper_ebs_{{groups['bookkeeper'].index(inventory_hostname)}}"
#       register: ec2_vol_info
#     - name: Store volume serial number
#       ansible.builtin.set_fact:
#         ebs_volume_id: "{{ ec2_vol_info.volumes[0].id | replace('-', '') }}"
#     - name: List Linux block devices
#       ansible.builtin.shell:
#         cmd: "lsblk -p -o NAME,SERIAL | grep {{ ebs_volume_id }} | cut -d' ' -f1"
#       register: lsblk
#     - name: Store EBS volume device name
#       ansible.builtin.set_fact:
#         ebs_volume_device_name: "{{ lsblk.stdout }}"
#     - name: Format EC2 volume
#       debugger: on_failed
#       community.general.filesystem:
#         fstype: xfs
#         dev: "{{ ebs_volume_device_name }}"
#         force: no
#     - name: Mount disks
#       mount:
#         path: "{{ item.path }}"
#         src: "{{ item.src }}"
#         fstype: xfs
#         opts: defaults,noatime,nodiscard
#         state: mounted
#       with_items:
#         - { path: "/mnt/journal", src: '{{ ebs_volume_device_name }}' }

- name: BookKeeper setup
  hosts: bookkeeper
  tags: ["bookkeeper"]
  connection: ssh
  become: true
  tasks:
    - file: path=/opt/bookkeeper state=absent
    - file: path=/opt/bookkeeper state=directory
    - name: Download BookKeeper binary package
      unarchive:
        src: "https://archive.apache.org/dist/bookkeeper/bookkeeper-{{ bookkeeperVersion }}/bookkeeper-all-{{ bookkeeperVersion }}-bin.tar.gz"
        remote_src: yes
        dest: /opt/bookkeeper
        extra_opts: ["--strip-components=1"]
    - template:
        src: "templates/bk_server.conf"
        dest: "/opt/bookkeeper/conf/bk_server.conf"
    - template:
        src: "templates/bkenv.sh"
        dest: "/opt/bookkeeper/conf/bkenv.sh"
    - template:
        src: "templates/common.sh"
        dest: "/opt/bookkeeper/bin/common.sh"
    - name: Format BookKeeper metadata in Zookeeper
      command: >
        bin/bookkeeper shell initnewcluster
      args:
        chdir: /opt/bookkeeper
      when: groups['bookkeeper'][0] == inventory_hostname
    - name: Start iostat
      shell: nohup iostat -xdct 1 10000 >> /opt/iostat.log &
      args:
        executable: /bin/bash
    - name: Install bookkeeper systemd service
      template:
        src: "templates/bookkeeper.service"
        dest: "/etc/systemd/system/bookkeeper.service"
    - systemd:
        name: "bookkeeper"
        daemon_reload: yes
        state: restarted
        enabled: yes

- name: Pravega Segment Store installation
  hosts: bookkeeper
  tags: ["segmentstore"]
  connection: ssh
  become: true
  tasks:
    - name: Mount EFS volume for Pravega tier 2 storage
      mount:
        path: "/mnt/tier2"
        src: "{{ groups['tier2'][0] }}:/"
        fstype: nfs4
        opts: nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2,noresvport
        state: mounted
    - template:
        src: "templates/pravega-segmentstore.service"
        dest: "/etc/systemd/system/pravega-segmentstore.service"
    - systemd:
        name: "pravega-segmentstore"
        daemon_reload: yes
        state: restarted
        enabled: yes

- name: Chrony setup
  hosts: client
  tags: ["client"]
  connection: ssh
  become: true
  tasks:
    - name: Set up chronyd
      template:
        src: "templates/chrony.conf"
        dest: "/etc/chrony.conf"
    - systemd:
        name: "chronyd"
        daemon_reload: yes
        state: restarted
        enabled: yes

- name: Benchmark client setup
  hosts: client
  tags: ["client"]
  connection: ssh
  become: true
  tasks:
    - file: path=/opt/benchmark state=absent
      tags: [client-code]
    - name: Copy benchmark code
      unarchive:
        src: ../../package/target/openmessaging-benchmark-0.0.1-SNAPSHOT-bin.tar.gz
        dest: /opt
      tags: [client-code]
    - shell: mv /opt/openmessaging-benchmark-0.0.1-SNAPSHOT /opt/benchmark
      tags: [client-code]
    - template:
        src: "templates/workers.yaml"
        dest: "/opt/benchmark/workers.yaml"
    - name: Get list of driver config files
      raw: ls -1 /opt/benchmark/driver-pravega/*.yaml
      register: drivers_list
    - name: Configure service URL
      lineinfile:
         dest: '{{ item }}'
         regexp: '^  controllerURI\: '
         line: '  controllerURI: {{ controllerUrl }}'
      with_items: '{{ drivers_list.stdout_lines }}'
    - name: Configure memory
      lineinfile:
         dest: /opt/benchmark/bin/benchmark-worker
         regexp: '^JVM_MEM='
         line: 'JVM_MEM="-Xms26G -Xmx26G -XX:+UseG1GC -XX:MaxGCPauseMillis=10 -XX:+ParallelRefProcEnabled -XX:+UnlockExperimentalVMOptions -XX:+AggressiveOpts -XX:+DoEscapeAnalysis -XX:ParallelGCThreads=16 -XX:ConcGCThreads=16 -XX:G1NewSizePercent=50 -XX:+DisableExplicitGC -XX:-ResizePLAB -XX:+PerfDisableSharedMem -XX:+AlwaysPreTouch -XX:-UseBiasedLocking"'
    - name: Configure memory
      lineinfile:
         dest: /opt/benchmark/bin/benchmark
         regexp: '^JVM_MEM='
         line: 'JVM_MEM="-Xmx4G"'
    - name: Install benchmark systemd service
      template:
        src: "templates/benchmark-worker.service"
        dest: "/etc/systemd/system/benchmark-worker.service"
    - systemd:
        name: "benchmark-worker"
        daemon_reload: yes
        state: restarted
        enabled: yes
